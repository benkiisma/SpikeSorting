function read_Intan_spike_file(varargin)

% read_Intan_spike_file(option)
%
% Version 3.0, 11 February 2021
%
% Reads spike.dat files generated by Intan Technologies RHX data acqusition
% software.  Data are parsed and placed into variables that appear in the 
% base MATLAB workspace.  Therefore, it is recommended to execute a 'clear' 
% command before running this program to clear all other variables from the 
% base workspace.
%
% Spike data from N channels are loaded into an N x M cell array named
% 'spikes', where M = 5 if spike snapshots were saved, otherwise M = 4.
% The first column of spikes contains native channel names.  The second
% column contains custom channel names.  The third column contains spike
% timestamps.  The forth column contains spike ID numbers (128 = likely
% artifact due to amplitude exceeding threshold set in Spike Scope).  All 
% normal spikes have a spike ID of 1.  Future versions of the RHX software
% may support realtime spike sorting, and in this case spike ID will 
% denote different identified spikes (1, 2, 3, etc.).  If spike snapshots
% were saved then they are contained in the fifth column.
%
% If the function is called with the optional 'noartifacts' parameter, all
% spikes with spike ID = 128 are ignored.
% 
% Example:
% >> clear
% >> read_Intan_spike_file('noartifacts')
% >> whos
% >> spikes
% >> timestamps = spikes{1,3};
% >> plot(timestamps, zeros(length(timestamps),1), '.');
% >> spike_IDs = cell2mat(spikes(1,4));
% >> plot(t_snapshot, spikes{1,5});

no_artifacts = 0;
if (nargin == 1)
    if (varargin{1} == 'noartifacts')
        no_artifacts = 1;
    end
end

[file, path] = ...
    uigetfile('*.dat', 'Select a Spike Data File', 'MultiSelect', 'off');

if (file == 0)
    return;
end

% Open data file
filename = [path, file];
fid = fopen(filename, 'r');

s = dir(filename);
filesize = s.bytes;

% Check 'magic number' at beginning of file to make sure this is an Intan
% Technologies spike data file.
magic_number = fread(fid, 1, 'uint32');
if magic_number == hex2dec('18f8474b')
    multichannel = 1;
elseif magic_number == hex2dec('18f88c00')
    multichannel = 0;
else
    error('Unrecognized file type.');
end

spike_file_version_number = fread(fid, 1, 'uint16');

if (spike_file_version_number > 1)
    display('Warning: This spike file version is not supported by this file reader.');
    display('Check the Intan Technologies website for a more recent version.');
end

filename = read_string(fid);
channel_list = split(read_string(fid), ",");
custom_channel_list = split(read_string(fid), ",");

sample_rate = fread(fid, 1, 'single');

samples_pre_detect = fread(fid, 1, 'uint32');
samples_post_detect = fread(fid, 1, 'uint32');
n_samples = samples_pre_detect + samples_post_detect;

if (n_samples == 0)
    snapshots_present = 0;
else
    snapshots_present = 1;
end

N = length(channel_list);
channel_index = 1:N;
channel_map = containers.Map(channel_list, channel_index);

spikes = cell(N, 4 + snapshots_present);
for i=1:N
    spikes{i,1} = channel_list(i);
    spikes{i,2} = custom_channel_list(i);
    spikes{i,3} = zeros(0, 0, 'single');
    spikes{i,4} = zeros(0, 0, 'uint8');
    if (snapshots_present)
        spikes{i,5} = zeros(0, 0, 'single');
    end
end

while (filesize - ftell(fid) > 0)
    if (multichannel)
        channel_name = fread(fid, 5, 'char=>char')';
        index = channel_map(channel_name);
    else
        index = 1;
    end
    
    timestamp = fread(fid, 1, 'int32');
    spike_id = fread(fid, 1, 'uint8');
    if (snapshots_present)
        snapshot = fread(fid, n_samples, 'uint16');
    end

    if (spike_id == 128 && no_artifacts)
        continue;
    end
    
    timestamp_seconds = single(timestamp) / sample_rate;

    spikes{index, 3} = [spikes{index, 3}, timestamp_seconds];
    spikes{index, 4} = [spikes{index, 4}, spike_id];
    if (snapshots_present)
        snapshot_microvolts = 0.195 * (single(snapshot) - 32768);
        spikes{index, 5} = [spikes{index, 5}, snapshot_microvolts];
    end
end

% Close data file
fclose(fid);

move_to_base_workspace(filename);
move_to_base_workspace(spikes);
move_to_base_workspace(sample_rate);

if (snapshots_present)
    t_snapshot = 0:1:(n_samples - 1);
    t_snapshot = t_snapshot - samples_pre_detect;
    t_snapshot = t_snapshot / sample_rate;
    move_to_base_workspace(t_snapshot);
end

end

function str = read_string(fid)

str = "";
ch = fread(fid, 1, 'char=>char')';
while (ch ~= 0)
    str = str + ch;
    ch = fread(fid, 1, 'char=>char')';
end

end

function move_to_base_workspace(variable)

% move_to_base_workspace(variable)
%
% Move variable from function workspace to base MATLAB workspace so
% user will have access to it after the program ends.

variable_name = inputname(1);
assignin('base', variable_name, variable);

return;
end


